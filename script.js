// Inicializa o mapa com uma posi√ß√£o padr√£o
const mapa = L.map("mapa").setView([0, 0], 2);

// Adiciona o mapa do OpenStreetMap
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: '¬© OpenStreetMap contributors',
}).addTo(mapa);

// Vari√°veis globais para armazenar a latitude e longitude
let latitude = null;
let longitude = null;

// Captura a refer√™ncia ao elemento com id "resultado" e "resultado2" para poder manipular o conte√∫do deles depois
const resultado = document.getElementById("resultado");
let resultado2 = document.getElementById("resultado2");

// Fun√ß√£o chamada ao clicar no bot√£o "üìç Obter Localiza√ß√£o"
function pegarLocalizacao() {
    // Verifica se o navegador suporta o recurso de geolocaliza√ß√£o
    if (navigator.geolocation) {

        // Se suportar, tenta obter a posi√ß√£o atual do usu√°rio
        // O m√©todo getCurrentPosition recebe duas fun√ß√µes:
        // - A primeira (mostrarPosicao) √© chamada se a localiza√ß√£o for obtida com sucesso
        // - A segunda (mostrarErro) √© chamada se houver algum erro ao tentar obter a localiza√ß√£o
        // - O terceiro (opcional) permite personaliza√ß√µes 

        navigator.geolocation.getCurrentPosition(mostrarPosicao, mostrarErro, {
            enableHighAccuracy: true, // Pede mais precis√£o
            timeout: 10000, // Espera at√© 10 segundos para obter a posi√ß√£o
            maximumAge: 0 // Garante que a posi√ß√£o n√£o seja uma antiga salva em cache
        });
    } else {
        // Caso o navegador n√£o suporte geolocaliza√ß√£o, exibe uma mensagem de aviso
        resultado.innerHTML = "Geolocaliza√ß√£o n√£o √© suportada por este navegador";
    }
}

// Fun√ß√£o chamada se houver erro ao tentar obter a localiza√ß√£o
function mostrarErro(error) {
    // Usa um "switch" para tratar diferentes tipos de erro que podem ocorrer
    switch (error.code) {
        case error.PERMISSION_DENIED:
            // Erro 1: O usu√°rio negou a permiss√£o para o site acessar a localiza√ß√£o
            resultado.innerHTML = "‚õî O usu√°rio negou o acesso √† localiza√ß√£o.";
            break;
        case error.POSITION_UNAVAILABLE:
            // Erro 2: A localiza√ß√£o n√£o est√° dispon√≠vel (GPS desligado, sem internet, etc.)
            resultado.innerHTML = "‚ùå A localiza√ß√£o n√£o est√° dispon√≠vel.";
            break;
        case error.TIMEOUT:
            // Erro 3: O tempo para obter a localiza√ß√£o expirou
            resultado.innerHTML = "‚è≥ A solicita√ß√£o expirou.";
            break;
        default:
            // Erro 4: Algum erro desconhecido aconteceu
            resultado.innerHTML = "‚ö†Ô∏è Erro desconhecido ao tentar obter a localiza√ß√£o.";
    }
}

// Fun√ß√£o chamada quando a localiza√ß√£o √© obtida com sucesso
function mostrarPosicao(posicao) {
    // `posicao.coords.latitude` e `posicao.coords.longitude` pegam os dados da posi√ß√£o retornada
    latitude = posicao.coords.latitude;
    longitude = posicao.coords.longitude;
    // Insere a latitude e longitude no elemento "resultado"
    resultado.innerHTML = `Latitude: ${latitude}
<br>Longitude: ${longitude}
<br> <a href="https://www.google.com.br/maps/@${latitude},${longitude},20z?entry=ttu" target="_blank">
<h4>üåç Ver no Google Maps</h4></a>`;
    // O link gerado leva diretamente para o Google Maps com as coordenadas obtidas

    // Centraliza o mapa na localiza√ß√£o do usu√°rio e d√° zoom
    mapa.setView([latitude, longitude], 18);

    // Adiciona um marcador com popup
    L.marker([latitude, longitude])
        .addTo(mapa)
        .bindPopup("üìç Voc√™ est√° aqui!")
        .openPopup();
}

// Fun√ß√£o ao clicar no bot√£o "üìå Buscar Endere√ßo" para buscar o endere√ßo usando a API do OpenStreetMap
async function buscarEndereco() {

    // Verifica se as coordenadas foram obtidas
    if (latitude === null || longitude === null) {
        resultado2.innerHTML = "‚ö†Ô∏è Primeiro obtenha as coordenadas!";
        return;
    }

    // Faz a requisi√ß√£o √† API
    try {
        // Monta a URL com as coordenadas obtidas
        const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=pt-br`;

        // Chama a API e espera pela resposta
        const resposta = await fetch(url);

        // Transforma a resposta em JSON
        const dados = await resposta.json();
        console.log(dados);

        // Extrai as informa√ß√µes de endere√ßo para a vari√°vel endereco
        const endereco = dados.address;
        console.log(endereco);

        // Exibe o endere√ßo formatado
        resultado2.innerHTML = `
    <h3>üìç Detalhes do endere√ßo:</h3>
    Pa√≠s: ${endereco.country || "N/A"}<br>
    Estado: ${endereco.state || "N/A"}<br>
    Cidade: ${endereco.city || endereco.town || endereco.village || "N/A"}<br>
    Bairro: ${endereco.suburb || "N/A"}<br>
    Rua: ${endereco.road || "N/A"}<br>
    CEP: ${endereco.postcode || "N/A"}<br>
    <a href="https://www.openstreetmap.org/?mlat=${latitude}&mlon=${longitude}" target="_blank">
        <h4>üåç Ver no OpenStreetMap</h4>
    </a>
`;


    } catch (erro) {
        resultado2.innerHTML = "‚ùå Erro ao buscar o endere√ßo!";
        console.error("Erro ao buscar dados:", erro);
    };
}